import numpy as np
import torch
import torch.nn as nn
from torch.nn import  functional as F
"""
import pycuda.gpuarray as gpuarray
import pycuda.autoinit
import skcuda.linalg as sklin
from cupy.cuda.compiler import compile_with_cache
#from cupy.core.dlpack import toDlpack
#from cupy.core.dlpack import fromDlpack
"""
from torch.utils.dlpack import to_dlpack
from torch.utils.dlpack import from_dlpack
import torchvision
import matplotlib.pyplot as plt

torch.manual_seed(1)

epoches = 50000
batch_size = 30
learning_rate = 0.001

class GrCNN_I(nn.Module):
    def __init__(self,d):
        super(GrCNN_I, self).__init__()
        self.d = d
        self.conv1 = nn.Sequential(
            nn.Conv2d(
                in_channels=3,
                out_channels=16,
                kernel_size=7,
                stride=1,
                padding=0
            ),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2)
        )  # output size [batch_size, 16, 64, 64]
        self.conv2 = nn.Sequential(
            nn.Conv2d(
                in_channels=16,
                out_channels=32,
                kernel_size=5,
                stride=1,
                padding=0
            ),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2)
        )  # output size [batch_size, 16, 32, 32]
        self.conv3 = nn.Sequential(
            nn.Conv2d(
                in_channels=32,
                out_channels=8,
                kernel_size=3,
                stride=1,
                padding=0
            ),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=1)
        )  # output size [batch_size, 8, 26, 26]
        self.fc1 = nn.Linear(in_features=8 * 26 * 26, out_features=512)
        self.fc2 = nn.Linear(in_features=512, out_features=self.d*784)


    def forward(self, x):
        x = self.conv1(x)
        x = self.conv2(x)
        x = self.conv3(x)
        #x = self.layers(x) # [batch_size, 8, 32, 32]
        x = x.view(x.size(0), -1) # [batch_size, 5048 1]
        x = self.fc1(x) # [batch_size, 512]
        output = self.fc2(x) # [batch_size, 784*d]
        output = torch.reshape(output, (-1, 784, self.d))
        return output

    def loss_EU(self, gt_U, pre_U):
        criterion = nn.MSELoss(reduction='mean')
        loss = criterion(gt_U, pre_U)
        return loss

class GrCNN_E(nn.Module):
    def __init__(self, d):
        super(GrCNN_E, self).__init__()
        self.d = d
        self.conv1 = nn.Sequential(
            nn.Conv2d(
                in_channels=3,
                out_channels=16,
                kernel_size=7,
                stride=1,
                padding=0
            ),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2)
        )  # output size [batch_size, 16, 64, 64]
        self.conv2 = nn.Sequential(
            nn.Conv2d(
                in_channels=16,
                out_channels=32,
                kernel_size=5,
                stride=1,
                padding=0
            ),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=2)
        )  # output size [batch_size, 16, 32, 32]
        self.conv3 = nn.Sequential(
            nn.Conv2d(
                in_channels=32,
                out_channels=8,
                kernel_size=3,
                stride=1,
                padding=0
            ),
            nn.ReLU(),
            nn.MaxPool2d(kernel_size=1)
        )  # output size [batch_size, 8, 26, 26]
        self.fc1 = nn.Linear(in_features=8 * 26 * 26, out_features=512)
        self.fc2 = nn.Linear(in_features=512, out_features=784*round((784-d)/3))
        self.layers = nn.Sequential(
            self.conv1,
            self.conv2,
            self.conv3
        )


    def forward(self, x):
        x = self.conv1(x)
        x = self.conv2(x)
        x = self.conv3(x)# [batch_size, 8, 26, 26]
        x = x.view(x.size(0), -1)  # [batch_size, 1]
        x = self.fc1(x)
        x = self.fc2(x)  # [batch_size, 784*d]
        x = torch.reshape(x, (-1, 784, round((784 - self.d)/3)))
        S = torch.bmm(x, x.transpose(1, 2))
        S_back = torch.zeros(S.shape).cuda()
        S = torch.where(torch.isnan(S)==False, S, S_back)
        e, V = torch.symeig(S, eigenvectors=True)
        #V, sig, _ = torch.svd(S)
        output = V[:, :, :self.d]
        return output


    def lossEU(self, gt_S, pre_S):
        criterion = nn.MSELoss(reduction='mean')
        loss = criterion(gt_S, pre_S)
        return loss

class ResidualBlock(nn.Module):
    '''
    实现子module: Residual Block
    '''

    def __init__(self, inchannel, outchannel, stride=1, shortcut=None):
        super(ResidualBlock, self).__init__()
        self.left = nn.Sequential(
            nn.Conv2d(inchannel, outchannel, 3, stride, 1, bias=False),
            nn.BatchNorm2d(outchannel),
            nn.ReLU(inplace=True),
            nn.Conv2d(outchannel, outchannel, 3, 1, 1, bias=False),
            nn.BatchNorm2d(outchannel))
        self.right = shortcut

    def forward(self, x):
        out = self.left(x)
        residual = x if self.right is None else self.right(x)
        out += residual
        return F.relu(out)

class ResNet_I(nn.Module):
    '''
    实现主module：ResNet34
    ResNet34 包含多个layer，每个layer又包含多个residual block
    用子module来实现residual block，用_make_layer函数来实现layer
    '''

    def __init__(self, d):
        super(ResNet_I, self).__init__()
        # 前几层图像转换
        self.pre = nn.Sequential(
            nn.Conv2d(3, 64, 7, 2, 3, bias=False),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(3, 2, 1))

        # 重复的layer，分别有3，4，6，3个residual block
        self.d = d
        self.layer1 = self._make_layer(64, 64, 3)
        self.layer2 = self._make_layer(64, 128, 4, stride=2)
        self.layer3 = self._make_layer(128, 256, 6, stride=1)
        self.layer4 = self._make_layer(256, 512, 3, stride=2)

        # 分类用的全连接
        self.fc1 = nn.Linear(in_features=1024, out_features=512)
        self.fc2 = nn.Linear(in_features=512, out_features=self.d*784)

    def _make_layer(self, inchannel, outchannel, block_num, stride=1):
        '''
        构建layer,包含多个residual block
        '''
        shortcut = nn.Sequential(
            nn.Conv2d(inchannel, outchannel, 1, stride, bias=False),
            nn.BatchNorm2d(outchannel))

        layers = []
        layers.append(ResidualBlock(inchannel, outchannel, stride, shortcut))

        for i in range(1, block_num):
            layers.append(ResidualBlock(outchannel, outchannel))
        return nn.Sequential(*layers)

    def forward(self, x):
        x = self.pre(x)

        x = self.layer1(x)
        x = self.layer2(x)
        x = self.layer3(x)
        # x = self.layer4(x)

        x = F.avg_pool2d(x, 7)
        x = x.view(x.size(0), -1)
        x = self.fc1(x)
        output = self.fc2(x)  # [batch_size, 784*d]
        output = torch.reshape(output, (-1, 784, self.d))
        return output

class ResNet_E(nn.Module):
    '''
    实现主module：ResNet34
    ResNet34 包含多个layer，每个layer又包含多个residual block
    用子module来实现residual block，用_make_layer函数来实现layer
    '''

    def __init__(self, d):
        super(ResNet_E, self).__init__()
        # 前几层图像转换
        self.pre = nn.Sequential(
            nn.Conv2d(3, 64, 7, 2, 3, bias=False),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(3, 2, 1))

        # 重复的layer，分别有3，4，6，3个residual block
        self.d = d
        self.layer1 = self._make_layer(64, 64, 3)
        self.layer2 = self._make_layer(64, 128, 4, stride=2)
        self.layer3 = self._make_layer(128, 256, 6, stride=1)
        self.layer4 = self._make_layer(256, 512, 3, stride=2)

        # 分类用的全连接
        self.fc1 = nn.Linear(in_features=1024, out_features=512)
        self.fc2 = nn.Linear(in_features=512, out_features=784 * round((784 - self.d) / 3))

    def _make_layer(self, inchannel, outchannel, block_num, stride=1):
        '''
        构建layer,包含多个residual block
        '''
        shortcut = nn.Sequential(
            nn.Conv2d(inchannel, outchannel, 1, stride, bias=False),
            nn.BatchNorm2d(outchannel))

        layers = []
        layers.append(ResidualBlock(inchannel, outchannel, stride, shortcut))

        for i in range(1, block_num):
            layers.append(ResidualBlock(outchannel, outchannel))
        return nn.Sequential(*layers)

    def forward(self, x):
        #x = self.pre(x)

        x = self.layer1(x)
        x = self.layer2(x)
        x = self.layer3(x)
        #x = self.layer4(x)

        x = F.avg_pool2d(x, 7)
        x = x.view(x.size(0), -1)
        x = self.fc1(x)
        x = self.fc2(x)
        x = torch.reshape(x, (-1, 784, round((784 - self.d) / 3)))
        S = torch.bmm(x, x.transpose(1, 2))
        S_back = torch.zeros(S.shape).cuda()
        S = torch.where(torch.isnan(S) == False, S, S_back)
        e, V = torch.symeig(S, eigenvectors=True)
        # V, sig, _ = torch.svd(S)
        output = V[:, :, :self.d]
        return output

    def lossEU(self, gt_S, pre_S):
        criterion = nn.MSELoss(reduction='mean')
        loss = criterion(gt_S, pre_S)
        return loss
